#!/usr/bin/env php
<?php

$command = $argv[1] ?? null;
$name = $argv[2] ?? null;

switch ($command) {
    case 'serve':
        echo "🚀 Starting StormPHP server at http://127.0.0.1:8000\n";
        exec("php -S 127.0.0.1:8000 -t public");
        break;

    case 'create:controller':
        if (!$name) {
            echo "❌ Please specify a controller name. Example: php stormphp create:controller HomeController\n";
            exit;
        }
        createFile("app/controllers/$name.php", getControllerTemplate($name));
        echo "✅ Controller '$name' created successfully!\n";
        break;

    case 'create:model':
        if (!$name) {
            echo "❌ Please specify a model name. Example: php stormphp create:model User\n";
            exit;
        }
        createFile("app/models/$name.php", getModelTemplate($name));
        echo "✅ Model '$name' created successfully!\n";
        break;

    case 'create:view':
        if (!$name) {
            echo "❌ Please specify a view name. Example: php stormphp create:view home\n";
            exit;
        }
        createFile("views/$name.php", getViewTemplate($name));
        echo "✅ View '$name' created successfully!\n";
        break;

    case 'create:middleware':
        if (!$name) {
            echo "❌ Please specify a middleware name. Example: php stormphp create:middleware AuthMiddleware\n";
            exit;
        }
        createFile("app/middleware/$name.php", getMiddlewareTemplate($name));
        echo "✅ Middleware '$name' created successfully!\n";
        break;


    default:
        echo "❌ Unknown command.\n";
        echo "Available commands:\n";
        echo "  php stormphp serve                - Start the development server\n";
        echo "  php stormphp create:controller Name - Create a new controller\n";
        echo "  php stormphp create:model Name      - Create a new model\n";
        echo "  php stormphp create:view Name       - Create a new view\n";
        echo "  php stormphp create:middleware Name - Create a new middleware\n";
        break;

}

function createFile($filePath, $content)
{
    $fullPath = __DIR__ . '/' . $filePath;

    if (file_exists($fullPath)) {
        echo "⚠️ File '$filePath' already exists!\n";
        return;
    }

    if (!is_dir(dirname($fullPath))) {
        mkdir(dirname($fullPath), 0777, true);
    }

    file_put_contents($fullPath, $content);
}

function getControllerTemplate($name)
{
    return "<?php\n\nnamespace App\Controllers;\n\nuse Core\Controller;\n\nclass $name extends Controller\n{\n    public function index()\n    {\n        // Render the view specific to this controller\n        \$this->view('" . strtolower($name) . "');\n    }\n\n    // You can define other methods here\n}\n";
}

function getModelTemplate($name)
{
    return "<?php\n\nnamespace App\Models;\n\nuse Core\Model;\n\nclass $name extends Model\n{\n    // Add your model properties and methods here\n}\n";
}

function getMiddlewareTemplate($name)
{
    return "<?php\n\n/**
 * $name Middleware Class
 *
 * This class contains middleware functions to handle user and admin authentication.
 * It checks if a user is logged in and if the user has the appropriate role for access.
 * 
 * Methods:
 * - userAuth(): Redirects to home if the user is not authenticated.
 * - adminAuth(): Redirects to home if the user is not an admin.
 *
 * Usage:
 * Call Middleware::userAuth() to ensure the user is authenticated.
 * Call Middleware::adminAuth() to ensure the user is an admin.
 *
 * @package App\Middleware
 */
namespace App\Middleware;

class $name
{
    public static function userAuth()
    {
        if (!isset(\$_SESSION['user'])) {
            ?>
            <script>
                window.location.href = '/';
            </script>
            <?php
            exit;
        }
    }

    public static function adminAuth()
    {
        if (!isset(\$_SESSION['user']) || \$_SESSION['user']['role'] !== 'admin') {
            ?>
            <script>
                window.location.href = '/';
            </script>
            <?php
            exit;
        }
    }
}
";
}

function getViewTemplate($name)
{
    return "<h1>Welcome to $name page!</h1>";
}
?>




<!-- StormPHP Installer -->
#!/usr/bin/env php
<?php

$command = $argv[1] ?? null;
$projectName = $argv[2] ?? null;

if ($command === 'new') {
    if (!$projectName) {
        echo "❌ Please specify a project name. Example: stormphp new MyProject\n";
        exit(1);
    }

    $repoURL = "https://github.com/anyasauce/stormphp.git";
    echo "🚀 Creating a new StormPHP project: $projectName...\n";

    exec("git clone $repoURL $projectName && cd $projectName && rm -rf .git", $output, $return);

    if ($return === 0) {
        echo "✅ StormPHP project '$projectName' created successfully!\n";
        echo "➡️  Run the following commands:\n";
        echo "   cd $projectName\n";
        echo "   php storm serve\n";
    } else {
        echo "❌ Failed to create project. Please check your internet connection.\n";
    }
} else {
    echo "❌ Unknown command. Use: storm new ProjectName\n";
}

?>